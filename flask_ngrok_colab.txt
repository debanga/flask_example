# -*- coding: utf-8 -*-
"""ML_Model_Deployment_using_Flask

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XGd1qdR2L1DCTpxG3MbAzJGSlDX058r8
"""

!ls

"""## First, Train a model and save it!"""

import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt # to plot inage, graph
import time
import seaborn as sns
from sklearn.metrics import accuracy_score,confusion_matrix # metrics error
from sklearn.model_selection import train_test_split # resampling method
from sklearn.datasets import load_digits
from sklearn.multiclass import OneVsRestClassifier
from keras.datasets import mnist

(X_train_, y_train_), (X_test_, y_test_) = mnist.load_data()

X_train = X_train_[1:60000:10].reshape(6000,-1)
X_test = X_test_[1:10000:10].reshape(1000,-1)
y_train = y_train_[1:60000:10]
y_test = y_test_[1:10000:10]

hst = np.histogram(y_train)
plt.bar([0,1,2,3,4,5,6,7,8,9], hst[0])
plt.show()
hst = np.histogram(y_test)
plt.bar([0,1,2,3,4,5,6,7,8,9], hst[0])
plt.show()

from imblearn.under_sampling import RandomUnderSampler
rus = RandomUnderSampler()
X_train, y_train = rus.fit_resample(X_train, y_train)
X_test, y_test = rus.fit_resample(X_test, y_test)

hst = np.histogram(y_train)
plt.bar([0,1,2,3,4,5,6,7,8,9], hst[0])
plt.show()
hst = np.histogram(y_test)
plt.bar([0,1,2,3,4,5,6,7,8,9], hst[0])
plt.show()

if True:
    from sklearn.neural_network import MLPClassifier
    mlp = OneVsRestClassifier(MLPClassifier())
    mlp.fit(X_train,y_train)

    #%%
    predictions = mlp.predict(X_test)
    print('MLP Accuracy: %.3f' % accuracy_score(y_test,predictions))
else:
    #%%
    from sklearn.svm import SVC
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    svm = make_pipeline(StandardScaler(), SVC(gamma='auto'))
    svm.fit(X_train, y_train)

    #%%
    predictions = svm.predict(X_test)
    print('SVM Accuracy: %.3f' % accuracy_score(y_test,predictions))

#%%
cm = confusion_matrix(y_test,predictions)
plt.figure(figsize=(9,9))
sns.heatmap(cm,annot=True, fmt='.3f', linewidths=.5, square=True,cmap='Blues_r')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(accuracy_score(y_test,predictions))
plt.title(all_sample_title,size=15)

import pickle as pkl
with open("model_final.pkl", "wb") as f:
    pkl.dump(mlp, f)

"""## Web Deployment using Flask"""

!git clone https://github.com/debanga/flask_example.git

# Change directory
import os
os.chdir('flask_example')

# Install server
!pip install flask-ngrok

# Import Packages
import cv2
import pickle as pkl
from flask import Flask, request, render_template
from flask_ngrok import run_with_ngrok

# Setup authentication to a server
!pip install pyngrok==4.1.1
!ngrok authtoken '2HJViua5UWeAKa86oO8U3B5lEg7_5C4843xVvLTC1m91EfMbZ'

# Initialize a Flask app and connect with the server
app = Flask(__name__)
run_with_ngrok(app)  

# Process image and predict label
def processImg(IMG_PATH):
    # Load model
    with open("model.pkl", "rb") as f:
        model = pkl.load(f)
    
    # Read and preprocess image
    image = cv2.imread(IMG_PATH)
    image = cv2.resize(image, (28,28))[:,:,1]
    image = image.flatten()

    # Predict label
    predictions = model.predict(image.reshape(1,-1))

    return list(map(int, list(predictions)))

@app.route("/")
def index():
    return render_template("index.html")

@app.route('/uploader', methods = ['POST'])
def upload_file():
    predictions=""

    if request.method == 'POST':
        f = request.files['file']
        f.save("static/img.jpg")    
        preds = processImg("static/img.jpg")
    
    return render_template("upload.html", predictions=preds, display_image="../img.jpg") 


if __name__ == "__main__":
    app.run()