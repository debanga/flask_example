
# Clone the Flask Example Repo
!git clone https://github.com/debanga/flask_example.git

# Import Packages
from flask import Flask, request, render_template
from werkzeug.utils import secure_filename
import os
from sklearn.metrics import accuracy_score,confusion_matrix # metrics error
from sklearn.model_selection import train_test_split # resampling method
from sklearn.datasets import load_digits
from sklearn.multiclass import OneVsRestClassifier
from sklearn.neighbors import KNeighborsClassifier
import cv2
import pickle
from flask_ngrok import run_with_ngrok

# Change directory
os.chdir('flask_example')

# Install server
!pip install flask-ngrok

# Setup authentication to a server
!pip install pyngrok==4.1.1
!ngrok authtoken '2HJViua5UWeAKa86oO8U3B5lEg7_5C4843xVvLTC1m91EfMbZ'

# Initialize a Flask app and connect with the server
app = Flask(__name__)
run_with_ngrok(app)   

# Process image and predict label
def processImg(IMG_PATH):
    # Load model
    with open("model.pkl", "rb") as f:
        knn = pickle.load(f)
    
    # Read and preprocess image
    image = cv2.imread(IMG_PATH)
    image = cv2.resize(image, (28,28))[:,:,1]
    image = image.flatten()

    # Predict label
    predictions = knn.predict(image.reshape(1,-1))

    return list(map(int, list(predictions)))

@app.route("/")
def index():
    return render_template("index.html")

@app.route('/uploader', methods = ['POST'])
def upload_file():
    predictions=""

    if request.method == 'POST':
        f = request.files['file']
        f.save("static/img.jpg")
        
        preds = processImg("static/img.jpg")

        print("preds:::",preds)
    return render_template("upload.html", predictions=preds, display_image="../img.jpg") 


if __name__ == "__main__":
    app.run()
